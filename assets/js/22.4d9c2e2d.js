(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{223:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"chuoi-va-van-ban"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chuoi-va-van-ban","aria-hidden":"true"}},[t._v("#")]),t._v(" Chuỗi và văn bản")]),t._v(" "),s("p",[t._v("Ở bài trước bạn đã viết string tuy nhiên vẫn chưa biết chúng dùng để làm gì. Trong bài này, chúng ta sẽ tạo ra một loạt các biến với các chuỗi phức tạp để xem xem chúng làm được gì. Đầu tiên sẽ là một chút giải thích về chuỗi.")]),t._v(" "),s("p",[t._v("Chuỗi là một văn bản nhỏ bạn muốn hiển thị ra hay xuất ra ngoài chương trình. Python sẽ biết bạn muốn thứ gì đó trở thành chuỗi khi đặt "),s("code",[t._v('"')]),t._v(" (nháy kép) hoặc "),s("code",[t._v("'")]),t._v(" (nháy đơn) quanh văn bản. Bạn đã thấy điều này rất nhiều lần khi sử dụng print ở các bài trước.")]),t._v(" "),s("p",[t._v("Chuỗi có thể chứa bao nhiêu biến trong code tùy ý. Nhớ rằng biến là bất kỳ dòng code nào mà bạn đặt name "),s("code",[t._v("=")]),t._v(" một giá trị. Ví dụ "),s("code",[t._v("types_of_people = 10")]),t._v(" tạo ra một biến "),s("code",[t._v("types_of_people")]),t._v(" và đặt nó "),s("code",[t._v("=")]),t._v(" (bằng) "),s("code",[t._v("10")]),t._v(". bạn có thể đặt biến này vào bất kỳ chuỗi nào với "),s("code",[t._v("{types_of_people}")]),t._v('. Chúng ta cũng phải dùng một kiểu đặc biệt của chuỗi để "định dạng", gọi là "f-string" và nó như sau:')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"some stuff here ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("avariable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"some other stuff ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("anothervar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v("\n")])])]),s("p",[t._v("Python "),s("em",[t._v("cũng")]),t._v(" có một kiểu định dạng khác sử dụng cú pháp "),s("code",[t._v(".format()")]),t._v(" được viết ở dòng thứ 17. Bạn sẽ thấy đôi khi tôi dùng nó khi muốn định dạng cho một chuỗi đã được tạo, ví dụ như khi dùng vòng lặp. Chúng ta sẽ tìm hiểu kĩ hơn về điều này sau.")]),t._v(" "),s("p",[t._v("Sau đây chúng ta sẽ viết một loạt các chuỗi, biến và định dạng sau đó in ra. Bạn cũng sẽ thực hành sử dụng các biến rút gọn. Lập trình viên luôn thích tiết kiệm thời gian bằng cách sử dụng các tên biến khó chịu, vì vậy hãy bắt đầu với việc đọc và viết chúng từ sớm.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("types_of_people "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"There are ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("types_of_people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' types of people."')])]),t._v("\n\nbinary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"binary"')]),t._v("\ndo_not "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"don\'t"')]),t._v("\n\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Those who know ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("binary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" and those who ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("do_not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"I said: ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f\"I also said: '")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nhilarious "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\njoke_evaluation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Isn\'t that joke so funny?! {}"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("joke_evaluation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hilarious"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nw "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the left side of..."')]),t._v("\ne "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a string with a right side."')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Sau đây là kết quả:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ python3 code/ex6.py\nThere are 10 types of people.\nThose who know binary and those who don't.\nI said: There are 10 types of people.\nI also said: 'Those who know binary and those who don't.'\nIsn't that joke so funny?! False\nThis is the left side of...a string with a right side.\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);