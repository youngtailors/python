(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{215:function(t,a,n){"use strict";n.r(a);var s=n(0),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"print-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#print-4","aria-hidden":"true"}},[t._v("#")]),t._v(" Print (4)")]),t._v(" "),n("p",[t._v("Các kí tự đặc biệt "),n("code",[t._v("'")]),t._v(" hay "),n("code",[t._v('"')]),t._v(" khi đặt giữa một chuỗi sẽ gây ra một vấn đề lớn. Tưởng tượng bạn có một chuỗi sử dụng nháy kép và muốn đặt một dấu nháy kép ở trong chuỗi, ví dụ như "),n("code",[t._v('"I "understand" joe."')]),t._v(" Khi đó Python sẽ không hiểu được vì dấu nháy kép trước từ "),n("code",[t._v("understand")]),t._v(" đã kết thúc chuỗi rồi. Do đó bạn cần phải cho Python biết rằng dấu nháy kép ở trong chuỗi không thực sự là dấu nháy kép, như sau:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I am 6\'2\\" tall."')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# escape double qoute-inside string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am 6\\'2\" tall.'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# escape single-quote inside string. The second way is by using triple-quotes, which is just """ and work like a string, but also can put many lines of text as you want until you type """ again. We\'ll also play with these.')]),t._v("\n")])])]),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[t._v("tabby_cat "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\tI\'m tabbed in."')]),t._v('"\npersian_cat '),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m split\\non a line."')]),t._v("\nbackslash_cat "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m \\\\ a \\\\ cat."')]),t._v("\n\nfat_cat "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nI\'ll do a list:\n\\t* Cat food\n\\t* Fishies\n\\t* Catnip\\n\\t* Grass\n"""')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tabby_cat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("persian_cat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("backslash_cat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fat_cat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Kết quả:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$python3 code/ex10.py\n  I'm tabbed in.\nI'm a split\non a line.\nI'll do a list:\n  * Cat food\n  * Fish\n  * Catnip\n  * Grass\n")])])]),n("h2",{attrs:{id:"bang-ki-tu-dac-biet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bang-ki-tu-dac-biet","aria-hidden":"true"}},[t._v("#")]),t._v(" Bảng kí tự đặc biệt")]),t._v(" "),n("p",[t._v("Dưới đây là toàn bộ các kí tự đặc biệt với "),n("code",[t._v("\\")]),t._v(" mà Python hỗ trợ.")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Escape")]),t._v(" "),n("th",[t._v("What it does.")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("\\")]),t._v(" "),n("td",[t._v("Backslash ()")])]),t._v(" "),n("tr",[n("td",[t._v("'")]),t._v(" "),n("td",[t._v("Single-quote (')")])]),t._v(" "),n("tr",[n("td",[t._v('"')]),t._v(" "),n("td",[t._v('Double-quote (")')])]),t._v(" "),n("tr",[n("td",[t._v("\\a")]),t._v(" "),n("td",[t._v("ASCII bell (BEL)")])]),t._v(" "),n("tr",[n("td",[t._v("\\b")]),t._v(" "),n("td",[t._v("ASCII backspace (BS)")])]),t._v(" "),n("tr",[n("td",[t._v("\\f")]),t._v(" "),n("td",[t._v("ASCII formfeed (FF)")])]),t._v(" "),n("tr",[n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("ASCII linefeed (LF)")])]),t._v(" "),n("tr",[n("td",[t._v("\\N{name}")]),t._v(" "),n("td",[t._v("Kí tự có tên name trong Unicode database (Chỉ Unicode) ()")])]),t._v(" "),n("tr",[n("td",[t._v("\\r")]),t._v(" "),n("td",[t._v("Cariage return (CR)")])]),t._v(" "),n("tr",[n("td",[t._v("\\t")]),t._v(" "),n("td",[t._v("Horizontal tab (TAB)")])]),t._v(" "),n("tr",[n("td",[t._v("\\uxxxx")]),t._v(" "),n("td",[t._v("Kí tự với 16-bit hex value xxxx")])]),t._v(" "),n("tr",[n("td",[t._v("\\Uxxxxxxxx")]),t._v(" "),n("td",[t._v("Kí tự với 32-bit hex value xxxxxxxx")])]),t._v(" "),n("tr",[n("td",[t._v("\\v")]),t._v(" "),n("td",[t._v("ASCII verticle tab (VT)")])]),t._v(" "),n("tr",[n("td",[t._v("\\ooo")]),t._v(" "),n("td",[t._v("Kí tự với octal value ooo")])]),t._v(" "),n("tr",[n("td",[t._v("\\xhh")]),t._v(" "),n("td",[t._v("Kí tự với hex value hh")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);